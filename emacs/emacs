;; default colors
(add-to-list 'default-frame-alist '(foreground-color . "#e4e4ef"))
(add-to-list 'default-frame-alist '(background-color . "#181818"))

(column-number-mode t)
(set-language-environment "UTF-8")
(show-paren-mode t)

;; set default directory on c-x c-f
(setq default-directory "~/")
;; highlight marked region
(setq transient-mark-mode t)
;; set word-wrapping column
(setq fill-column 80)
;; don't show startup message
(setq inhibit-startup-message t)
;; turn on visual bell
(setq visible-bell t)
;; unbind suspend shortcut (still available with ctrl x z)
(global-unset-key [(control z)])
;; use "y or n" answers instead of full words "yes or no"
(fset 'yes-or-no-p 'y-or-n-p)
(if (display-graphic-p)
    (progn
      ;; turn off scroll-bar
      (scroll-bar-mode nil)
      ;; turn off tool-bar
      (tool-bar-mode 0)
      ;; turn off empty space on left and right side of windows
      (set-fringe-mode 0)))
;; turn on source code formatting
(global-font-lock-mode 1)
;; ask for confirmation before quitting Emacs
(add-hook 'kill-emacs-query-functions
          (lambda () (y-or-n-p "Do you really want to exit Emacs? "))
          'append)
;; remember cursor position in files
(require 'saveplace)
(setq-default save-place t)

;; move backup to directory ~/.emacs.d/backups/
(add-to-list 'load-path "~/.emacs.d/backup-dir/")
(require 'backup-dir)
(make-variable-buffer-local 'backup-inhibited)
(setq bkup-backup-directory-info
      '((t "~/.emacs.d/backups" ok-create full-path prepend-name)))
(setq delete-old-versions t
      kept-old-versions 1
      kept-new-versions 3
      version-control t)

;; set window size
(defun set-frame-size-according-to-resolution ()
  "Set default frame size according to display resolution"
  (interactive)
  (if (display-graphic-p)
      (progn
	(add-to-list 'default-frame-alist (cons 'width 120))
	;; for the height, subtract a some pixels from the screen
	;; height (for panels, menubars and whatnot), then divide by
	;; the height of a char to get the height we want
	(add-to-list 'default-frame-alist (cons
					   'height (/ (- (x-display-pixel-height) 185)
						      (frame-char-height)))))))
(set-frame-size-according-to-resolution)

;; functions to work with window transparency
(defun transparency-set-initial-value ()
  "Set initial value of alpha parameter for the current frame"
  (interactive)
  (if (equal (frame-parameter nil 'alpha) nil)
      (set-frame-parameter nil 'alpha 100)))
(defun transparency-set-value (number)
  "Set level of transparency for the current frame"
  (interactive "nEnter transparency level in range 0-100: ")
  (if (> number 100)
      (message "Error! The maximum value for transparency is 100!")
    (if (< number 0)
	(message "Error! The minimum value for transparency is 0!")
      (set-frame-parameter nil 'alpha number))))

;; window transparency
(setq transparency-level 95)
(set-frame-parameter nil 'alpha transparency-level)
(add-hook 'after-make-frame-functions
	  (lambda (selected-frame)
	    (set-frame-parameter selected-frame 'alpha transparency-level)))

;; [org-mode] global commands
(global-set-key "\C-cl" 'org-store-link)
(global-set-key "\C-ca" 'org-agenda)
(global-set-key "\C-cc" 'org-capture)
(global-set-key "\C-cb" 'org-iswitchb)

;; [org-mode] replace stars with whitespace for indentation
(setq-default org-startup-indented 't)
;; [org-mode] allow some edits when trees are collapsed
(setq-default org-catch-invisible-edits 'smart)

;; [org-mode] create *scratch-org*
(switch-to-buffer (get-buffer-create (generate-new-buffer-name "*scratch-org*")))
(org-mode)

(if (and
     (equal system-type 'gnu/linux)
     (file-exists-p ".emacs.linux.el"))
    (load-file ".emacs.linux.el"))

(if (and
     (equal system-type 'darwin)
     (file-exists-p ".emacs.mac.el"))
    (load-file ".emacs.mac.el"))

(if (file-exists-p ".emacs.local.el")
    (load-file ".emacs.local.el"))
